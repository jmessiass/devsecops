name: Security Scan - Fixed

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

env:
  FAIL_ON_SEVERITY: "CRITICAL,HIGH"

jobs:
  # SAST - Static Application Security Testing
  sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >- 
            p/security-audit
            p/secrets
            p/owasp-top-ten
          
      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-results
          path: semgrep.sarif
          retention-days: 30

      - name: Upload to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: sast

  # SCA - Software Composition Analysis (Simplified)
  sca-trivy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-sca.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: false

      - name: Upload SCA Trivy results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sca-trivy-results
          path: trivy-sca.sarif
          retention-days: 30

      - name: Upload to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-sca.sarif
          category: sca-trivy

  # SCA - Dependency Check (Java/Maven only)
  sca-dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Maven project
        id: check-maven
        run: |
          if [ -f "pom.xml" ]; then
            echo "maven_exists=true" >> $GITHUB_OUTPUT
          else
            echo "maven_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up JDK
        if: steps.check-maven.outputs.maven_exists == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        if: steps.check-maven.outputs.maven_exists == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run OWASP Dependency Check
        if: steps.check-maven.outputs.maven_exists == 'true'
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'devsecops-project'
          path: '.'
          format: 'JSON,SARIF'
          out: 'dependency-check-report'
          args: >
            --failOnCVSS 7
            --enableRetired
            --suppression dependency-check-suppressions.xml

      - name: Upload Dependency Check results
        uses: actions/upload-artifact@v4
        if: always() && steps.check-maven.outputs.maven_exists == 'true'
        with:
          name: dependency-check-results
          path: dependency-check-report/
          retention-days: 30

  # Secrets Scanning
  secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_COMMENTS: false

      # Backup secret scanner
      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified --no-update

  # IaC - Infrastructure as Code Security (Simplified)
  iac:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy IaC scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-iac.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload IaC results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: iac-results
          path: trivy-iac.sarif
          retention-days: 30

      - name: Upload to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-iac.sarif
          category: iac

      # Alternative IaC scanner usando tfsec (mais leve)
      - name: Check for Terraform files
        id: check-terraform
        run: |
          if find . -name "*.tf" -type f | head -1 | grep -q .; then
            echo "terraform_exists=true" >> $GITHUB_OUTPUT
          else
            echo "terraform_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        if: steps.check-terraform.outputs.terraform_exists == 'true'
        with:
          soft_fail: true

  # DAST - Dynamic Application Security Testing (Only on main branch)
  dast:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start application
        run: |
          if [ -f "Dockerfile" ]; then
            docker build -t app-under-test .
            docker run -d --name test-app -p 5000:5000 app-under-test
            sleep 30
            echo "Application started on port 5000"
          else
            echo "No Dockerfile found, skipping DAST"
            exit 0
          fi

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:5000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          
      - name: Upload DAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dast-results
          path: report_html.html
          retention-days: 30

  # Consolidação de resultados
  consolidate-results:
    runs-on: ubuntu-latest
    needs: [sast, sca-trivy, secrets, iac]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results/

      - name: Consolidate SARIF files
        run: |
          mkdir -p consolidated-sarif
          # Find and copy all SARIF files
          find all-results/ -name "*.sarif" -exec cp {} consolidated-sarif/ \; 2>/dev/null || true
          # List what we found
          echo "Found SARIF files:"
          ls -la consolidated-sarif/ || echo "No SARIF files found"

      - name: Upload consolidated results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: consolidated-security-results
          path: consolidated-sarif/
          retention-days: 30

      - name: Create security summary
        if: github.event_name == 'pull_request'
        run: |
          echo "# 🔒 Security Scan Results Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan completed for PR #${{ github.event.number }}**" >> security-summary.md
          echo "" >> security-summary.md
          echo "| Scanner | Status | Notes |" >> security-summary.md
          echo "|---------|---------|-------|" >> security-summary.md
          
          # Check if each job completed
          if [ "${{ needs.sast.result }}" = "success" ]; then
            echo "| 🔍 SAST (Semgrep) | ✅ Passed | Code analysis completed |" >> security-summary.md
          else
            echo "| 🔍 SAST (Semgrep) | ❌ Failed | Check logs for details |" >> security-summary.md
          fi
          
          if [ "${{ needs.sca-trivy.result }}" = "success" ]; then
            echo "| 📦 SCA (Trivy) | ✅ Passed | Dependency scan completed |" >> security-summary.md
          else
            echo "| 📦 SCA (Trivy) | ❌ Failed | Check logs for details |" >> security-summary.md
          fi
          
          if [ "${{ needs.secrets.result }}" = "success" ]; then
            echo "| 🔑 Secrets (Gitleaks) | ✅ Passed | No secrets detected |" >> security-summary.md
          else
            echo "| 🔑 Secrets (Gitleaks) | ❌ Failed | Potential secrets found |" >> security-summary.md
          fi
          
          if [ "${{ needs.iac.result }}" = "success" ]; then
            echo "| 🏗️ IaC (Trivy) | ✅ Passed | Infrastructure scan completed |" >> security-summary.md
          else
            echo "| 🏗️ IaC (Trivy) | ❌ Failed | Check logs for details |" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "**Next Step**: Review any failed scans and consider implementing AI-powered auto-fixes 🤖" >> security-summary.md
          
          cat security-summary.md

      - name: Upload summary
        uses: actions/upload-artifact@v4
        if: github.event_name == 'pull_request'
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 7

  # Trigger para futuro workflow de IA
  prepare-ai-analysis:
    runs-on: ubuntu-latest
    needs: consolidate-results
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Prepare AI analysis payload
        run: |
          echo "🤖 Preparing data for AI analysis..."
          echo "PR Number: ${{ github.event.number }}"
          echo "SHA: ${{ github.sha }}"
          echo "Repository: ${{ github.repository }}"
          echo ""
          echo "Available artifacts for AI analysis:"
          echo "- consolidated-security-results"
          echo "- security-summary"
          echo ""
          echo "This data will be used by the AI agent to:"
          echo "1. Analyze security vulnerabilities"
          echo "2. Generate fix suggestions"
          echo "3. Create automated pull requests with fixes"
          echo "4. Comment on this PR with recommendations"